// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow renders 1`] = `
.c8 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
}

.c4 {
  width: 0.4rem;
  height: 0.4rem;
  border: 0.2rem solid;
  border-radius: 50%;
  background: none;
  -webkit-transition: border 0.3s,background-color 0.3s;
  transition: border 0.3s,background-color 0.3s;
  margin-right: 0.25rem;
}

.c4:last-of-type {
  margin-right: 0;
}

.c5 {
  width: 0.4rem;
  height: 0.4rem;
  border: 0.2rem solid;
  border-radius: 50%;
  -webkit-transition: border 0.3s,background-color 0.3s;
  transition: border 0.3s,background-color 0.3s;
  margin-right: 0.25rem;
}

.c5:last-of-type {
  margin-right: 0;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 {
  width: 1400px;
  max-width: 100%;
  height: auto;
  box-sizing: border-box;
  margin: 0 auto;
  padding: 0 2rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c2 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
  font-size: 3rem;
  font-weight: bold;
}

.c7 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
  font-size: 1.5rem;
  font-weight: normal;
}

.c12 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
  font-size: 1.2rem;
  font-weight: normal;
}

.c6 {
  padding: 4rem 0;
}

.c6:first-of-type {
  padding-top: 2rem;
}

.c6:last-of-type {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c9 {
  display: grid;
  grid-template-rows: repeat(1,1fr);
  grid-template-columns: repeat(4,1fr);
  grid-column-gap: 3rem;
}

.c10 {
  width: 100%;
  padding-top: 100%;
  overflow: hidden;
  height: 0;
  position: relative;
  box-shadow: rgba(0,0,0,0.03) 0 0 0 0.0625em,rgba(0,0,0,0.05) 0 0.0625em 0 0, rgba(0,0,0,0.1) 0 0.0625em 0.1875em 0;
}

.c11 {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
}

<EtherFlow>
  <Flow
    components={
      Array [
        [Function],
        [Function],
        [Function],
        [Function],
      ]
    }
    handleDone={[Function]}
    title="Search for Ether"
  >
    <styled.div>
      <div
        className="c0"
      >
        <styled.div>
          <div
            className="c1"
          >
            <Styled(styled.p)
              as="h1"
            >
              <h1
                className="c2"
              >
                Search for Ether
              </h1>
            </Styled(styled.p)>
            <StepIndicator
              currentStep={0}
              steps={4}
            >
              <styled.div>
                <div
                  className="c3"
                >
                  <styled.div
                    active={true}
                    key="step-0"
                  >
                    <div
                      className="c4"
                    />
                  </styled.div>
                  <styled.div
                    active={false}
                    key="step-1"
                  >
                    <div
                      className="c5"
                    />
                  </styled.div>
                  <styled.div
                    active={false}
                    key="step-2"
                  >
                    <div
                      className="c5"
                    />
                  </styled.div>
                  <styled.div
                    active={false}
                    key="step-3"
                  >
                    <div
                      className="c5"
                    />
                  </styled.div>
                </div>
              </styled.div>
            </StepIndicator>
          </div>
        </styled.div>
      </div>
    </styled.div>
    <SelectWallet
      onNext={[Function]}
      onReset={[Function]}
      state={Object {}}
    >
      <Styled(Component)
        animate="enter"
        exit="exit"
        initial="initial"
        transition={
          Object {
            "duration": 0.6,
          }
        }
        variants={
          Object {
            "enter": Object {
              "opacity": 1,
            },
            "exit": Object {
              "opacity": 0,
            },
            "initial": Object {
              "opacity": 0,
            },
          }
        }
      >
        <ForwardRef(MotionComponent)
          animate="enter"
          className="c6"
          exit="exit"
          initial="initial"
          transition={
            Object {
              "duration": 0.6,
            }
          }
          variants={
            Object {
              "enter": Object {
                "opacity": 1,
              },
              "exit": Object {
                "opacity": 0,
              },
              "initial": Object {
                "opacity": 0,
              },
            }
          }
        >
          <section
            className="c6"
            style={
              Object {
                "opacity": 0,
              }
            }
          >
            <Meta
              title="Select a wallet type"
            >
              <Helmet
                defaultTitle="FindETH"
                defer={true}
                encodeSpecialCharacters={true}
                htmlAttributes={
                  Object {
                    "lang": "en",
                  }
                }
                meta={
                  Array [
                    Object {
                      "content": "Easily find your lost Ether, tokens, or Ethereum address, by automatically scanning a bunch of derivation paths",
                      "name": "description",
                    },
                    Object {
                      "content": "Ether, Ethereum, ERC20, ERC-20, tokens, address, private key, derivation path, mnemonic phrase, Ledger, Trezor, hardware wallet, lost",
                      "name": "keywords",
                    },
                    Object {
                      "content": "Maarten Zuidhoorn",
                      "name": "author",
                    },
                  ]
                }
                title="Select a wallet type"
              >
                <HelmetDispatcher
                  context={
                    Object {
                      "helmetInstances": Object {
                        "add": [Function],
                        "get": [Function],
                        "remove": [Function],
                      },
                      "setHelmet": [Function],
                    }
                  }
                  defaultTitle="FindETH"
                  defer={true}
                  encodeSpecialCharacters={true}
                  htmlAttributes={
                    Object {
                      "lang": "en",
                    }
                  }
                  meta={
                    Array [
                      Object {
                        "content": "Easily find your lost Ether, tokens, or Ethereum address, by automatically scanning a bunch of derivation paths",
                        "name": "description",
                      },
                      Object {
                        "content": "Ether, Ethereum, ERC20, ERC-20, tokens, address, private key, derivation path, mnemonic phrase, Ledger, Trezor, hardware wallet, lost",
                        "name": "keywords",
                      },
                      Object {
                        "content": "Maarten Zuidhoorn",
                        "name": "author",
                      },
                    ]
                  }
                  title="Select a wallet type"
                />
              </Helmet>
            </Meta>
            <styled.div>
              <div
                className="c0"
              >
                <Styled(styled.p)
                  as="h2"
                >
                  <h2
                    className="c7"
                  >
                    Select a wallet type
                  </h2>
                </Styled(styled.p)>
                <styled.p>
                  <p
                    className="c8"
                  >
                    Choose one of the available wallet types from the list below.
                  </p>
                </styled.p>
                <styled.div
                  columns={4}
                  rows={1}
                >
                  <div
                    className="c9"
                    rows={1}
                  >
                    <WalletPanel
                      key="Ledger"
                      onClick={[Function]}
                      title="Ledger"
                      type="Ledger"
                    >
                      <Panel
                        key="Ledger"
                        onClick={[Function]}
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c10"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c11"
                              >
                                <Styled(styled.p)
                                  as="h3"
                                >
                                  <h3
                                    className="c12"
                                  >
                                    Ledger
                                  </h3>
                                </Styled(styled.p)>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </Panel>
                    </WalletPanel>
                    <WalletPanel
                      key="Trezor"
                      onClick={[Function]}
                      title="Trezor"
                      type="Trezor"
                    >
                      <Panel
                        key="Trezor"
                        onClick={[Function]}
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c10"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c11"
                              >
                                <Styled(styled.p)
                                  as="h3"
                                >
                                  <h3
                                    className="c12"
                                  >
                                    Trezor
                                  </h3>
                                </Styled(styled.p)>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </Panel>
                    </WalletPanel>
                    <WalletPanel
                      key="KeepKey"
                      onClick={[Function]}
                      title="KeepKey"
                      type="KeepKey"
                    >
                      <Panel
                        key="KeepKey"
                        onClick={[Function]}
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c10"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c11"
                              >
                                <Styled(styled.p)
                                  as="h3"
                                >
                                  <h3
                                    className="c12"
                                  >
                                    KeepKey
                                  </h3>
                                </Styled(styled.p)>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </Panel>
                    </WalletPanel>
                    <WalletPanel
                      key="Mnemonic Phrase"
                      onClick={[Function]}
                      title="Mnemonic Phrase"
                      type="MnemonicPhrase"
                    >
                      <Panel
                        key="Mnemonic Phrase"
                        onClick={[Function]}
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c10"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c11"
                              >
                                <Styled(styled.p)
                                  as="h3"
                                >
                                  <h3
                                    className="c12"
                                  >
                                    Mnemonic Phrase
                                  </h3>
                                </Styled(styled.p)>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </Panel>
                    </WalletPanel>
                  </div>
                </styled.div>
              </div>
            </styled.div>
          </section>
          <Memo(MountComponent)
            innerRef={
              Object {
                "current": .c3 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
}

.c1 {
  width: 1400px;
  max-width: 100%;
  height: auto;
  box-sizing: border-box;
  margin: 0 auto;
  padding: 0 2rem;
}

.c2 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
  font-size: 1.5rem;
  font-weight: normal;
}

.c7 {
  display: block;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  line-height: 1.5;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
  font-size: 1.2rem;
  font-weight: normal;
}

.c0 {
  padding: 4rem 0;
}

.c0:first-of-type {
  padding-top: 2rem;
}

.c0:last-of-type {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c4 {
  display: grid;
  grid-template-rows: repeat(1,1fr);
  grid-template-columns: repeat(4,1fr);
  grid-column-gap: 3rem;
}

.c5 {
  width: 100%;
  padding-top: 100%;
  overflow: hidden;
  height: 0;
  position: relative;
  box-shadow: rgba(0,0,0,0.03) 0 0 0 0.0625em,rgba(0,0,0,0.05) 0 0.0625em 0 0, rgba(0,0,0,0.1) 0 0.0625em 0.1875em 0;
}

.c6 {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
}

<section
                  class="c0"
                  style="opacity: 0;"
                >
                  <div
                    class="c1"
                  >
                    <h2
                      class="c2"
                    >
                      Select a wallet type
                    </h2>
                    <p
                      class="c3"
                    >
                      Choose one of the available wallet types from the list below.
                    </p>
                    <div
                      class="c4"
                      rows="1"
                    >
                      <div
                        class="c5"
                      >
                        <div
                          class="c6"
                        >
                          <h3
                            class="c7"
                          >
                            Ledger
                          </h3>
                        </div>
                      </div>
                      <div
                        class="c5"
                      >
                        <div
                          class="c6"
                        >
                          <h3
                            class="c7"
                          >
                            Trezor
                          </h3>
                        </div>
                      </div>
                      <div
                        class="c5"
                      >
                        <div
                          class="c6"
                        >
                          <h3
                            class="c7"
                          >
                            KeepKey
                          </h3>
                        </div>
                      </div>
                      <div
                        class="c5"
                      >
                        <div
                          class="c6"
                        >
                          <h3
                            class="c7"
                          >
                            Mnemonic Phrase
                          </h3>
                        </div>
                      </div>
                    </div>
                  </div>
                </section>,
              }
            }
            isStatic={false}
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "opacity" => [Function],
                },
                "values": Map {
                  "opacity" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
          />
          <Component
            animate="enter"
            controls={
              ValueAnimationControls {
                "activeOverrides": Set {},
                "baseTarget": Object {
                  "opacity": 1,
                },
                "defaultTransition": Object {
                  "duration": 0.6,
                },
                "hasValue": [Function],
                "isAnimating": Set {
                  "opacity",
                },
                "makeTargetAnimatable": [Function],
                "overrides": Array [],
                "props": Object {
                  "animate": "enter",
                  "children": Array [
                    <Meta
                      title="Select a wallet type"
                    />,
                    <ForwardRef(styled.div)>
                      <ForwardRef(Styled(styled.p))
                        as="h2"
                      >
                        Select a wallet type
                      </ForwardRef(Styled(styled.p))>
                      <ForwardRef(styled.p)>
                        Choose one of the available wallet types from the list below.
                      </ForwardRef(styled.p)>
                      <ForwardRef(styled.div)
                        columns={4}
                        rows={1}
                      >
                        <WalletPanel
                          onClick={[Function]}
                          title="Ledger"
                          type="Ledger"
                        />
                        <WalletPanel
                          onClick={[Function]}
                          title="Trezor"
                          type="Trezor"
                        />
                        <WalletPanel
                          onClick={[Function]}
                          title="KeepKey"
                          type="KeepKey"
                        />
                        <WalletPanel
                          onClick={[Function]}
                          title="Mnemonic Phrase"
                          type="MnemonicPhrase"
                        />
                      </ForwardRef(styled.div)>
                    </ForwardRef(styled.div)>,
                  ],
                  "className": "sc-AxmLO c6",
                  "exit": "exit",
                  "initial": "initial",
                  "transition": Object {
                    "duration": 0.6,
                  },
                  "variants": Object {
                    "enter": Object {
                      "opacity": 1,
                    },
                    "exit": Object {
                      "opacity": 0,
                    },
                    "initial": Object {
                      "opacity": 0,
                    },
                  },
                },
                "readValueFromSource": [Function],
                "resolvedOverrides": Array [],
                "values": MotionValuesMap {
                  "hasMounted": true,
                  "onUpdate": undefined,
                  "output": [Function],
                  "unsubscribers": Map {
                    "opacity" => [Function],
                  },
                  "values": Map {
                    "opacity" => MotionValue {
                      "canTrackVelocity": true,
                      "current": 0,
                      "lastUpdated": 0,
                      "notifySubscriber": [Function],
                      "parent": undefined,
                      "prev": undefined,
                      "renderSubscribers": Set {
                        [Function],
                      },
                      "scheduleVelocityCheck": [Function],
                      "setChild": [Function],
                      "stopAnimation": [Function],
                      "timeDelta": 0,
                      "transformer": undefined,
                      "updateAndNotify": [Function],
                      "updateSubscribers": Set {
                        [Function],
                      },
                      "velocityCheck": [Function],
                    },
                  },
                },
                "variants": Object {
                  "enter": Object {
                    "opacity": 1,
                  },
                  "exit": Object {
                    "opacity": 0,
                  },
                  "initial": Object {
                    "opacity": 0,
                  },
                },
              }
            }
            inherit={false}
            initial="initial"
            key="animation"
            transition={
              Object {
                "duration": 0.6,
              }
            }
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "opacity" => [Function],
                },
                "values": Map {
                  "opacity" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
            variants={
              Object {
                "enter": Object {
                  "opacity": 1,
                },
                "exit": Object {
                  "opacity": 0,
                },
                "initial": Object {
                  "opacity": 0,
                },
              }
            }
          />
          <Component
            animate="enter"
            className="c6"
            controls={
              ValueAnimationControls {
                "activeOverrides": Set {},
                "baseTarget": Object {
                  "opacity": 1,
                },
                "defaultTransition": Object {
                  "duration": 0.6,
                },
                "hasValue": [Function],
                "isAnimating": Set {
                  "opacity",
                },
                "makeTargetAnimatable": [Function],
                "overrides": Array [],
                "props": Object {
                  "animate": "enter",
                  "children": Array [
                    <Meta
                      title="Select a wallet type"
                    />,
                    <ForwardRef(styled.div)>
                      <ForwardRef(Styled(styled.p))
                        as="h2"
                      >
                        Select a wallet type
                      </ForwardRef(Styled(styled.p))>
                      <ForwardRef(styled.p)>
                        Choose one of the available wallet types from the list below.
                      </ForwardRef(styled.p)>
                      <ForwardRef(styled.div)
                        columns={4}
                        rows={1}
                      >
                        <WalletPanel
                          onClick={[Function]}
                          title="Ledger"
                          type="Ledger"
                        />
                        <WalletPanel
                          onClick={[Function]}
                          title="Trezor"
                          type="Trezor"
                        />
                        <WalletPanel
                          onClick={[Function]}
                          title="KeepKey"
                          type="KeepKey"
                        />
                        <WalletPanel
                          onClick={[Function]}
                          title="Mnemonic Phrase"
                          type="MnemonicPhrase"
                        />
                      </ForwardRef(styled.div)>
                    </ForwardRef(styled.div)>,
                  ],
                  "className": "sc-AxmLO c6",
                  "exit": "exit",
                  "initial": "initial",
                  "transition": Object {
                    "duration": 0.6,
                  },
                  "variants": Object {
                    "enter": Object {
                      "opacity": 1,
                    },
                    "exit": Object {
                      "opacity": 0,
                    },
                    "initial": Object {
                      "opacity": 0,
                    },
                  },
                },
                "readValueFromSource": [Function],
                "resolvedOverrides": Array [],
                "values": MotionValuesMap {
                  "hasMounted": true,
                  "onUpdate": undefined,
                  "output": [Function],
                  "unsubscribers": Map {
                    "opacity" => [Function],
                  },
                  "values": Map {
                    "opacity" => MotionValue {
                      "canTrackVelocity": true,
                      "current": 0,
                      "lastUpdated": 0,
                      "notifySubscriber": [Function],
                      "parent": undefined,
                      "prev": undefined,
                      "renderSubscribers": Set {
                        [Function],
                      },
                      "scheduleVelocityCheck": [Function],
                      "setChild": [Function],
                      "stopAnimation": [Function],
                      "timeDelta": 0,
                      "transformer": undefined,
                      "updateAndNotify": [Function],
                      "updateSubscribers": Set {
                        [Function],
                      },
                      "velocityCheck": [Function],
                    },
                  },
                },
                "variants": Object {
                  "enter": Object {
                    "opacity": 1,
                  },
                  "exit": Object {
                    "opacity": 0,
                  },
                  "initial": Object {
                    "opacity": 0,
                  },
                },
              }
            }
            exit="exit"
            initial="initial"
            innerRef={
              Object {
                "current": <section
                  class="c6"
                  style="opacity: 0;"
                >
                  <div
                    class="c0"
                  >
                    <h2
                      class="c7"
                    >
                      Select a wallet type
                    </h2>
                    <p
                      class="c8"
                    >
                      Choose one of the available wallet types from the list below.
                    </p>
                    <div
                      class="c9"
                      rows="1"
                    >
                      <div
                        class="c10"
                      >
                        <div
                          class="c11"
                        >
                          <h3
                            class="c12"
                          >
                            Ledger
                          </h3>
                        </div>
                      </div>
                      <div
                        class="c10"
                      >
                        <div
                          class="c11"
                        >
                          <h3
                            class="c12"
                          >
                            Trezor
                          </h3>
                        </div>
                      </div>
                      <div
                        class="c10"
                      >
                        <div
                          class="c11"
                        >
                          <h3
                            class="c12"
                          >
                            KeepKey
                          </h3>
                        </div>
                      </div>
                      <div
                        class="c10"
                      >
                        <div
                          class="c11"
                        >
                          <h3
                            class="c12"
                          >
                            Mnemonic Phrase
                          </h3>
                        </div>
                      </div>
                    </div>
                  </div>
                </section>,
              }
            }
            key="exit"
            parentContext={
              Object {
                "static": false,
              }
            }
            transition={
              Object {
                "duration": 0.6,
              }
            }
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "opacity" => [Function],
                },
                "values": Map {
                  "opacity" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "stopAnimation": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
            variants={
              Object {
                "enter": Object {
                  "opacity": 1,
                },
                "exit": Object {
                  "opacity": 0,
                },
                "initial": Object {
                  "opacity": 0,
                },
              }
            }
          />
        </ForwardRef(MotionComponent)>
      </Styled(Component)>
    </SelectWallet>
  </Flow>
</EtherFlow>
`;
